# .github/workflows/rails_ci.yml
name: "Ruby on Rails CI"

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: rails_test
          POSTGRES_USER: rails
          POSTGRES_PASSWORD: password
        ports: ["5432:5432"]
        options: >-
          --health-cmd "pg_isready -U rails"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      RAILS_ENV: test
      DATABASE_URL: postgres://rails:password@localhost:5432/rails_test

    steps:
      - uses: actions/checkout@v4

      # Needed so the 'pg' gem can compile in CI
      - name: Install PostgreSQL client headers
        run: sudo apt-get update && sudo apt-get install -y libpq-dev

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3.6"   # CI ruby (overrides local .ruby-version)
          bundler-cache: true

      - name: Prepare database (create/migrate)
        run: bin/rails db:prepare

      # Run one or both test frameworks if present
      - name: Run RSpec tests (if present)
        if: ${{ hashFiles('spec/**/*') != '' }}
        run: bundle exec rspec

      - name: Run Minitest (if present)
        if: ${{ hashFiles('test/**/*') != '' }}
        run: bin/rails test

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # If 'pg' is in your Gemfile (default group), rubocop's bundle install needs headers too
      - name: Install PostgreSQL client headers
        run: sudo apt-get update && sudo apt-get install -y libpq-dev

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3.6"
          bundler-cache: true

      - name: RuboCop
        run: bundle exec rubocop --parallel

      # JS linting only if you actually have JS tooling
      - name: Setup Node (if package.json exists)
        if: ${{ hashFiles('package.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: npm ci (if package.json exists)
        if: ${{ hashFiles('package.json') != '' }}
        run: npm ci

      - name: npm run lint (if script exists)
        if: ${{ hashFiles('package.json') != '' }}
        run: |
          if grep -q '"lint":' package.json; then
            npm run lint
          else
            echo "No npm lint script; skipping."
          fi
